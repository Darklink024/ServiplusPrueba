
@model net.paxialabs.mabe.serviplus.entities.ModelView.Users.ModelViewUser
@{
    Layout = null;
}

@*@using (Html.BeginForm())
    {

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UserID)

        <br />
        <div class="row">
            <fieldset>
                <div class="col-md-4 col-md-offset-4 col-sm-8 col-sm-offset-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ProfileID)
                        <div>
                            @Html.DropDownListFor(model => model.ProfileID, new SelectList(ViewBag.lstPerfil, "Value", "Text"), new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ProfileID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.UserName)
                        <div>
                            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name)
                        <div>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Email)
                        <div>
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <center>
                            <div>
                                <input type="submit" id="btnGuardar" value="Guardar" class="btn btn-unauth" />
                                <input type="button" id="btnCancelar" value="Cancelar" class="btn btn-danger" />
                            </div>
                        </center>
                    </div>
                </div>
    </fieldset>
        </div>

    }*@

@using (Html.BeginForm("", "#", FormMethod.Post, new { id = "frmUser", @class = "form-horizontal" }))
{
    @Html.HiddenFor(model => model.UserID)

        <div class="col-md-4 col-md-offset-4 col-sm-8 col-sm-offset-2">
            <br>
            <div class="form-group">
                <div class="col-md-8 col-md-offset-2">
                    @Html.DropDownListFor(model => model.ProfileID, new SelectList(ViewBag.lstPerfil, "Value", "Text"), new { @class = "form-control input-sm" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-8 col-md-offset-2">
                    <input type="text" class="form-control input-sm" id="UserName" name="UserName" placeholder="Usuario">
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-8 col-md-offset-2">
                    <input type="text" class="form-control input-sm" id="Name" name="Name" placeholder="Nombre">
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-8 col-md-offset-2">
                    <input type="email" class="form-control input-sm" id="Email" name="Email" placeholder="Correo electrónico">
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-8 col-md-offset-2">
                    <center>
                        <input type="submit" id="btnGuardar" value="Guardar" class="btn btn-unauth" />
                        <input type="button" id="btnCancelar" value="Cancelar" class="btn btn-danger" />
                    </center>
                </div>
            </div>
        </div>
  
}


@(Html.Kendo().Dialog()
        .Name("dialogProfileDetail")
        .Title("Serviplus")
        .Content("")
        .Width(400)
        .Modal(true)
        .Visible(false)
        .Actions(actions =>
        {
            actions.Add().Text("<button class='btn btn-confirmar'>Aceptar</button>");
        })
        .Events(ev => ev.Close("onClose").Open("onOpen"))
)



<script>
    $(document).ready(function () {
         $('[class="btn btn-default"]').tooltip();

            $('#frmUser').bootstrapValidator({
            message: 'Envio de formulario',
            excluded: [':disabled'],
            feedbackIcons: {
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            fields: {
                UserName: {
                    container: 'tooltip',
                    validators: {
                        notEmpty: {
                            message: 'Este campo es requerido.'
                        },
                    }
                },
                Name: {
                    container: 'tooltip',
                    validators: {
                        notEmpty: {
                            message: 'Este campo es requerido.'
                        },
                    }
                },
                Email: {
                    container: 'tooltip',
                    validators: {
                        notEmpty: {
                            message: 'Este campo es requerido.'
                        },
                        emailAddress: {
                            message: 'Campo de correo es inválido.'
                        }
                    }
                }
            }
        })
        .on('status.field.bv', function (e, data) {
            var $form = $(e.target),
            validator = data.bv,
            $tabPane = data.element.parents('.tab-pane'),
            tabId = $tabPane.attr('id');

            if (tabId) {
                var $icon = $('a[href="#' + tabId + '"][data-toggle="tab"]').parent().find('i');
                // Add custom class to tab containing the field
                if (data.status == validator.STATUS_INVALID) {
                        $icon.removeClass(faIcon.valid).addClass(faIcon.invalid);
                } else if (data.status == validator.STATUS_VALID) {
                    var isValidTab = validator.isValidContainer($tabPane);
                    $icon.removeClass(faIcon.valid).addClass(isValidTab ? faIcon.valid : faIcon.invalid);
                }
            }
        }).on('success.form.bv', function (e, data) {
            // Prevent form submission
            e.preventDefault();

            var online = navigator.onLine;
            if (!online)
            {
                bootbox.alert('');
                return false;
            }

            var form = $('#frmUser');
            var ProfileID = document.getElementById("ProfileID").value;
            var UserName = document.getElementById("UserName").value;
            var Name = document.getElementById("Name").value;
            var Email = document.getElementById("Email").value;
            var UserID = document.getElementById("UserID").value;
            if (UserID == "" || UserID == null)
            { UserID=0 }
            var model = { UserID: UserID, ProfileID: ProfileID, UserName: UserName, Name: Name, Email: Email }
       
        $.ajax({
            url: '../User/saveUser',
            type: "POST",
            cache: false,
            data: { modelo: JSON.stringify(model) },
            beforeSend: function (jqXHR, settings) { $("#divLoading").show(); },
            error: function (jqXHR, textStatus, errorThrown) {
                try {
                    $("#divLoading").hide();
                    var json = $.parseJSON(jqXHR.responseText)
                    if (json.serverError_Message == "DuplicateEmail") {
                        showDialog('El Correo Electrónico ya se encuentra registrado.');
                    }
                    if (json.serverError_Message == "DuplicateUser") {
                        showDialog('El Nombre de Usuario ya se encuentra registrado.');
                    }
                }
                catch (ex) {
                }
            },
            complete: function (jqXHR, textStatus) { ; },
            success: function (result) {
                $("#divLoading").hide();
                if (result == "Unauthorized") {
                    showDialog('No cuenta con permisos suficientes.');
                } else {
                    showDialog('Su solicitud se proceso con éxito.');
                }

                var grid = $("#grid").data("kendoGrid");
                grid.dataSource.read();
            }
            });

             });
    });

    //$("form").on("submit", function (event) {
    //    event.preventDefault();

    //    $.ajax({
    //        url: '../User/saveUser',
    //        type: "POST",
    //        cache: false,
    //        data: $(this).serialize(),
    //        beforeSend: function (jqXHR, settings) { $("#divLoading").show(); },
    //        error: function (jqXHR, textStatus, errorThrown) { /*$("#divLoading").hide();*/ },
    //        complete: function (jqXHR, textStatus) { ; },
    //        success: function (result) {

    //            $("#divLoading").hide();
    //            //$("#divModal").modal('toggle');

    //            if (result == "Unauthorized") {
    //                showDialog('No cuenta con permisos suficientes.');
    //            } else {
    //                showDialog('Su solicitud se proceso con éxito.');
    //            }
    //            var grid = $("#grid").data("kendoGrid");
    //            grid.dataSource.read();
    //        }
    //    });
    //});

    $("#btnCancelar").click(function () {

        $("#frmUser").validate().resetForm();
        $("#frmUser").find('.has-error').removeClass("has-error");
        $("#frmUser").find('.has-success').removeClass("has-success");
        $('#frmUser').find('.form-control-feedback').remove()

        //$('.form-group').removeClass('has-error has-feedback');
        //$('.form-group').find('small.help-block').hide();
        //$('.form-group').find('i.form-control-feedback').hide();
        $("#UserName").prop("readonly", false);
        $("#UserID").val("0");
        $("#Name").val("");
        $("#UserName").val("");
        $("#Email").val("");
        var splitter = $("#splitter").data("kendoSplitter");
        splitter.expand("#left-pane");
        splitter.collapse("#right-pane");
    });

    function onClose() {

    }

    function onOpen() {

    }

    function showDialog(msg) {

        var dialog = $('#dialogProfileDetail').data("kendoDialog");
        dialog.content(msg);
        dialog.open();
    }
</script>
